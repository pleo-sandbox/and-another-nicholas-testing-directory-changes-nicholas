# THIS CODE WAS AUTOGENERATED. DO NOT MODIFY THIS FILE DIRECTLY
# THE SOURCE CODE LIVES IN A DIFFERENT REPOSITORY:
#   - centralized-templates
# FILE STEWARD: @pleo-io/team-product-led-tooling


name: Trigger branch deployment to product-dev
on:
  pull_request:
    types:
      - labeled

concurrency: ci-${{ github.workflow }}

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  SHARED_SERVICES_ECR_URL: "${{ vars.AWS_ACCOUNT_ID_SHARED_SERVICES }}.dkr.ecr.eu-west-1.amazonaws.com/pleo/${{ github.event.repository.name }}"
  AWS_SHARED_SERVICES_IAM_ROLE_TO_ASSUME: arn:aws:iam::${{vars.AWS_ACCOUNT_ID_SHARED_SERVICES}}:role/github/repository/${{ github.event.repository.name }}-github-actions

jobs:
  fail-if-pr-branch-not-up-to-date-with-default:
    name: Fail if branch is not up-to-date with default branch
    runs-on: ubuntu-latest
    if: ${{ github.event.label.name == 'dev-deploy' && !contains(github.event.pull_request.labels.*.name, 'dev-deploy-revert') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 0

      - name: Test if branch is up-to-date with default branch
        run: |
          if ! git merge-base --is-ancestor origin/${{ github.event.repository.default_branch }} ${{ github.event.pull_request.head.sha }};
          then 
            echo "::error::This branch is not up to date with ${{ github.event.repository.default_branch }}. Please merge ${{ github.event.repository.default_branch }} into this branch and try labeling again."; 
            exit 1; 
          fi
  fail-if-sql-detected:
    name: Fail if .sql files are detected
    runs-on: ubuntu-latest
    if: ${{ github.event.label.name == 'dev-deploy' && !contains(github.event.pull_request.labels.*.name, 'dev-deploy-revert') }}
    steps:
      - name: Checkout the PR code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Check for .sql files
        run: |
          echo "## Checking for changed files between base and head..."
          BASE_REF="${{ github.event.pull_request.base.sha }}"
          HEAD_REF="${{ github.event.pull_request.head.sha }}"

          CHANGED_FILES=$(git diff --name-only "$BASE_REF" "$HEAD_REF")

          # Look for any file ending in .sql
          if echo "$CHANGED_FILES" | grep -E '\.sql$'; then
            echo "Error: One or more .sql files detected. For safety, we block test deployments in dev if database migrations may run. Please remove migration files before testing in dev."
            exit 1
          else
            echo "No .sql files detected. Continuing."
          fi
  check-for-existing-image:
    name: Check for existing image
    needs:
      - fail-if-sql-detected
      - fail-if-pr-branch-not-up-to-date-with-default
    if: ${{ github.event.label.name == 'dev-deploy' && !contains(github.event.pull_request.labels.*.name, 'dev-deploy-revert') }}
    outputs:
      has-existing-image: ${{ steps.has-existing-image.outputs.result }}
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ env.AWS_SHARED_SERVICES_IAM_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions
          aws-region: eu-west-1

      # Pull the latest 50 images pushed to ECR and store in Github env variable. 50 is as a limit as some repos have 100s of images to sort through and we only need to most recent ones to check
      - name: Load AWS ECR tags
        run: |
          config="$(aws ecr describe-images --repository-name pleo/${{ github.event.repository.name }} --registry-id ${{ vars.AWS_ACCOUNT_ID_SHARED_SERVICES }} --query 'sort_by(imageDetails,& imagePushedAt)[*]|[ -50:]')"
          {
            echo "config<<EOF"
            echo "$config"
            echo "EOF"
          } >> "$GITHUB_ENV"

      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        id: has-existing-image
        with:
          retries: 1
          script: |
            const hasExistingTag = (images) => {
              return images.flatMap(image => image.imageTags).includes("dev-${{ github.event.pull_request.head.sha }}")
            }

            return hasExistingTag(JSON.parse(`${{ env.config }}`))

  build-and-publish-image:
    name: Build and publish image
    needs:
      - fail-if-sql-detected
      - fail-if-pr-branch-not-up-to-date-with-default
      - check-for-existing-image
    if: needs.check-for-existing-image.outputs.has-existing-image == 'false'
    outputs:
      has-successful-docker-push: ${{ steps.has-successful-docker-push.outputs.result }}
      image-tag: ${{ steps.image-tag.outputs.result }}
    runs-on: ubuntu-latest-8-cores
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ env.AWS_SHARED_SERVICES_IAM_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions
          aws-region: eu-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          mask-password: "true"

      # Setup Buildx for Docker operations.
      - name: Setup Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Set up JDK 21
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          java-version: 21
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@ac638b010cf58a27ee6c972d7336334ccaf61c96 # v4.4.1
        with:
          # Cache only updated on release.
          cache-read-only: true

      # Set up a Node environment for JS/TS/Node client generation.
      - name: Set up Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 22

      - name: Assemble code
        run: ./gradlew assemble
        env:
          GITHUB_TOKEN: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          GRADLE_READ_KEY: ${{ secrets.GH_REGISTRY_GRADLE_TOKEN }}
          JOB_RUNR_REPO_PASSWORD: ${{ secrets.JOB_RUNR_REPO_PASSWORD }}

      - name: Build image tag
        id: image-tag
        run: |
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          echo "result=dev-${HEAD_SHA}"  >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          tags: ${{ steps.image-tag.outputs.result }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: github_sha=${{ steps.image-tag.outputs.result }}

      - name: Push Docker Image to AWS ECR
        run: |
          docker tag ${{ steps.image-tag.outputs.result }} ${{ env.SHARED_SERVICES_ECR_URL }}:${{ steps.image-tag.outputs.result }}
          docker push ${{ env.SHARED_SERVICES_ECR_URL }}:${{ steps.image-tag.outputs.result }}

      - name: Cleanup Docker
        run: |
          docker rmi -f ${{ env.SHARED_SERVICES_ECR_URL }}:${{ steps.image-tag.outputs.result }}

      - name: Register successful Docker push
        id: has-successful-docker-push
        run: echo "result=true"  >> "$GITHUB_OUTPUT"

  update-helm-release:
    name: Commit changes into product-dev Helm release
    needs:
      - fail-if-sql-detected
      - check-for-existing-image
      - build-and-publish-image
    if: |
      always() &&
      needs.check-for-existing-image.outputs.has-existing-image == 'true' ||
      needs.build-and-publish-image.outputs.has-successful-docker-push == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Allow pushing version updates to the default branch
        id: get-admin-token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2
        with:
          app-id: ${{ secrets.PLEO_GH_APP_TOKEN_SIGNER_APP_ID }}
          private-key: ${{ secrets.PLEO_GH_APP_TOKEN_SIGNER_PRIVATE_KEY }}

      # Checkout the code with the elevated token to allow default branch pushes.
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{ steps.get-admin-token.outputs.token }}
          ref: ${{ github.event.repository.default_branch }}

      - name: Add Helm release file to commit
        run: |
          git fetch origin ${{ github.event.pull_request.head.sha }}
          git show ${{ github.event.pull_request.head.sha }}:k8s/product-dev/application-${{ github.event.repository.name }}.yaml > k8s/product-dev/application-${{ github.event.repository.name }}.yaml

      - name: Update image tag
        id: helm-values-change-tag
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq e -i '.spec.values.imageTag = "dev-${{ github.event.pull_request.head.sha }}"' "k8s/product-dev/application-${{ github.event.repository.name }}.yaml"

      - name: Commit Helm release
        uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5 # v9.1.4
        with:
          author_name: github-actions[bot]-ci
          author_email: github-actions@pleo.io
          message: "Deploying branch [${{ github.event.pull_request.head.ref }}] to product-dev [skip ci]"
          add: k8s/product-dev/application-${{ github.event.repository.name }}.yaml
          commit: --no-verify
