# THIS CODE WAS AUTOGENERATED. DO NOT MODIFY THIS FILE DIRECTLY
# THE SOURCE CODE LIVES IN A DIFFERENT REPOSITORY:
#   - centralized-templates
# FILE STEWARD: @pleo-io/infrastructure-core


name: Validate Kubernetes configuration
run-name: "Validating k8s config: ${{ github.sha }}"

on:
  pull_request:
    branches:
      - main

concurrency:
  group: k8s-ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint Kubernetes Manifests
        # yamllint is included in GH action runners now, so we don't need the public action, it was causing issues so opted to avoid it
        # ATM we only care about trailing whitespaces due to a known issue https://github.com/mikefarah/yq/issues/566
        # otherwise yq will mess up the yaml file in the next step's yq -i or during update-image-tag later
        run: |
          yamllint -d "{rules: {trailing-spaces: enable}}" --format github ./k8s ||
          { echo "Make sure to remove trailing whitespaces from k8s files as it would make yq garble application.properties and break the deployment pipeline :)" &&
          exit 1; }

      - name: Lint Helm Charts
        run: |
          if [[ ! "$(find ./k8s -type f | wc -l)"  -gt "0" ]]; then 
            echo "No k8s config directories found, will skip linting Helm Releases."
            exit 0
          fi

          find ./k8s -type f -exec bash -c '
            exitcode=0
            for FILENAME in "$@"; do
              CHART=$(yq ".spec.chart.spec.chart" "$FILENAME" | head -1)
              VERSION=$(yq ".spec.chart.spec.version" "$FILENAME" | head -1)

              if [ -z "$CHART" ] || [ "$CHART" == "null" ] || [ -z "$VERSION" ] || [ "$VERSION" == "null" ]; then
                echo "Ignored $FILENAME."
              else
                echo "Helm linting $FILENAME..."
                yq ".spec.values" -i "$FILENAME"
                helm pull oci://ghcr.io/pleo-io/charts/"$CHART" --version "$VERSION" --untar --untardir .k8s-temp || exitcode=1
                helm lint .k8s-temp/"$CHART" --strict --values "$FILENAME" || exitcode=1
                rm -rf .k8s-temp/"$CHART"
              fi
            done
            exit "$exitcode"' bash {} +
