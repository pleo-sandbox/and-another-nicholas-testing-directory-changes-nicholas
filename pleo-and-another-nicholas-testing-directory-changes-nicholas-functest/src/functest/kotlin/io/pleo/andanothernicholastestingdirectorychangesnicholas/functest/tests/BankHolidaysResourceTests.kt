@file:Suppress("FunctionNaming")

package io.pleo.andanothernicholastestingdirectorychangesnicholas.functest.tests

import com.google.common.truth.Truth.assertThat
import io.pleo.andanothernicholastestingdirectorychangesnicholas.api.AndAnotherNicholasTestingDirectoryChangesNicholasApi.CurrencyCodeBankHolidaysFromElara.DKK
import io.pleo.andanothernicholastestingdirectorychangesnicholas.functest.base.AndAnotherNicholasTestingDirectoryChangesNicholasVanguardTest
import io.pleo.andanothernicholastestingdirectorychangesnicholas.functest.mocks.ElaraMock
import io.pleo.andanothernicholastestingdirectorychangesnicholas.functest.mocks.TYPE
import io.pleo.andanothernicholastestingdirectorychangesnicholas.infrastructure.ApiClient
import io.pleo.clients.kerberos.models.PermissionType
import io.pleo.vanguard.framework.extension.AuthSettings
import io.pleo.vanguard.framework.extension.ExtensionAuth
import java.time.LocalDate
import org.junit.jupiter.api.AfterAll
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Nested
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith

// ⚠️ INFO ⚠️

// You don't really need this file and can be safely removed!
// The point of it is to illustrate example of use cases you may come across.
// - with ❤️, DevX

enum class STATUS(
    val code: Int,
) {
    FORBIDDEN(code = 403),
    INTERNAL_SERVER_ERROR(code = 500),
    BAD_REQUEST(code = 400),
}

@ExtendWith(ExtensionAuth::class)
class BankHolidaysResourceTests : AndAnotherNicholasTestingDirectoryChangesNicholasVanguardTest() {
    @AfterAll
    fun cleanup() {
        // The accessToken needs to be reset to null because all test
        // share the same ApiClient instance and thus share state
        // between the tests.
        // The ApiClient is generated by the OpenAPI generator and
        // therefore out of our control.
        ApiClient.accessToken = null
    }

    @AuthSettings(
        user = "Bearer valid",
        type = PermissionType.OWNER,
        resource = "admin",
        resourceId = "and-another-nicholas-testing-directory-changes-nicholas",
        parentResource = "",
        parentResourceId = "",
    )
    @Nested
    inner class ValidAuthentication {
        @BeforeEach
        fun setUp() {
            // sets access token on client, which results having it on request
            ApiClient.accessToken = "valid"
        }

        @Test
        fun `should return holiday through resource`() {
            elaraMock.getHolidays(TYPE.ANY)

            val response = andAnotherNicholasTestingDirectoryChangesNicholasClient.bankHolidaysFromElara(DKK)

            assertThat(response.data.first().date)
                .isEqualTo(LocalDate.of(ElaraMock.YEAR, ElaraMock.MONTH, ElaraMock.DAY))
        }

        @Test
        fun `should return empty holiday list`() {
            elaraMock.getHolidays(TYPE.EMPTY)

            val response = andAnotherNicholasTestingDirectoryChangesNicholasClient.bankHolidaysFromElara(DKK)

            assertThat(response.data).isEmpty()
        }

        @Test
        fun `should return not found with empty response`() {
            elaraMock.getHolidays(TYPE.TIMEOUT)

            val dataResponse = andAnotherNicholasTestingDirectoryChangesNicholasClient.bankHolidaysFromElaraWithHttpInfo(DKK)

            assertThat(dataResponse.statusCode).isEqualTo(STATUS.INTERNAL_SERVER_ERROR.code)
        }
    }

    @AuthSettings(
        user = "Bearer valid_but_restricted",
        type = PermissionType.OWNER,
        resource = "not-a-bank-holidays",
        resourceId = "and-another-nicholas-testing-directory-changes-nicholas",
        parentResource = "",
        parentResourceId = "",
    )
    @Nested
    inner class RestrictedAuthentication {
        @Test
        fun `should not be able to access holiday through resource due to invalid permission`() {
            // not-a-bank-holidays - invalid permission to access bank holidays resource
            ApiClient.accessToken = "valid_but_restricted"

            val response = andAnotherNicholasTestingDirectoryChangesNicholasClient.bankHolidaysFromElaraWithHttpInfo(DKK)

            assertThat(response.statusCode).isEqualTo(STATUS.FORBIDDEN.code)
        }
    }
}
